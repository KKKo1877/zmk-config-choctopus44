/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define COMBO_TIMEOUT 60
#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

// &out OUT_BLE
// #define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

&mt {
    tapping-term-ms = <500>;

    // retro-tap;
};

&lt { tapping-term-ms = <180>; };

&sk {
    release-after-ms = <3000>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE MINUS SPACE BACKSPACE>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo-Lshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <6 18>;
        };

        bt_clr {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <25 26 27 35 34 33>;
        };

        combo-capslock {
            bindings = <&caps_word>;
            key-positions = <29 31>;
        };

        combo-question {
            bindings = <&kp QUESTION>;
            key-positions = <28 29>;
        };

        combo-exclamation {
            bindings = <&kp EXCL>;
            key-positions = <31 32>;
        };

        combo-at {
            bindings = <&kp AT>;
            key-positions = <7 19>;
        };

        combo-chinese {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <5 6>;
        };

        combo-stick-shift1 {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <33 21>;
        };

        combo-sticky-shift2 {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <27 14>;
        };

        combo-winlock {
            bindings = <&kp LG(L)>;
            key-positions = <7 8 9>;
        };

        combo-btclear {
            bindings = <&bt BT_CLR>;
            key-positions = <0 29>;
        };

        combo-winswap {
            bindings = <&kp LG(LA(TAB))>;
            key-positions = <4 3 2>;
        };

        combo-Lctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <5 17>;
        };
    };

    behaviors {
        hold_shift: hold_shift {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RSHIFT>, <&none>;
        };

        smart_moveline: smart_moveline {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RG(RALT)>, <&none>;
        };

        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp ESC>;
        };

        macro_slideover: macro_slideover {
            label = "ZM_macro_slideover";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_windows: macro_windows {
            label = "ZM_macro_windows";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        macro_switch: macro_switch {
            label = "ZM_macro_switch";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp GRAVE>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_up: FN_up {
            compatible = "zmk,behavior-macro";
            label = "FN_UP";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_down: FN_down {
            compatible = "zmk,behavior-macro";
            label = "FN_DOWN";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_left: FN_left {
            compatible = "zmk,behavior-macro";
            label = "FN_LEFT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        FN_right: FN_right {
            compatible = "zmk,behavior-macro";
            label = "FN_RIGHT";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp CAPS>;
        };

        next_slideover: next_slideover {
            compatible = "zmk,behavior-macro";
            label = "NEXT_SLIDEOVER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp CAPS &kp LCMD>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp CAPS &kp LCMD>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_hl: holdtap_homerowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAP_HOMELAY";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <125>;
        };

        ht_shift: ht_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "tap-preferred";
        };

        bsp_word: bsp_word {
            compatible = "zmk,behavior-mod-morph";
            label = "BSP_WORD";
            bindings = <&kp LA(BACKSPACE)>, <&kp LA(DELETE)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_semic: td_semic {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMIC";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            tapping-term-ms = <250>;
        };

        td_shiftCW: td_shiftCW {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTCW";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_ARROW";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LG(LEFT_ARROW)>;

            tapping-term-ms = <225>;
        };

        right_arr: right_arr {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_ARR";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LG(RIGHT)>;

            tapping-term-ms = <225>;
        };

        left_taphold: left_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        rght_taphold: rght_taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "RGHT_TAPHOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
        };

        ht_hyper: ht_hyper {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HYPER";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <125>;
            bindings = <&sk>, <&kp>;
        };

        mod_slash: mod_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_SLASH";
            bindings = <&kp KP_SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        pht_L2shift: pht_L2shift {
            compatible = "zmk,behavior-hold-tap";
            label = "PHT_L2SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <30 31 32 5 15 25 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;
        };

        ArrowSelect: ArrowSelect {
            compatible = "zmk,behavior-hold-tap";
            label = "ARROWSELECT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "tap-preferred";
        };

        mod_qmarkcolon: mod_qmarkcolon {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_QMARKCOLON";
            bindings = <&kp QUESTION>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ht_capsword: ht_capsword {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_CAPSWORD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-smart-toggle";
            #binding-cells = <0>;
            bindings = <&kp RGUI>, <&kp TAB>;

            label = "SWAPPER";
        };

        ht_swapper: ht_swapper {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SWAPPER";
            bindings = <&mo>, <&swapper>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        bh: layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer-Tap";
            #binding-cells = <2>;
            tapping-term-ms = <215>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        sm: shift_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp ESC            &kp Z                  &kp L           &kp D           &kp C             &kp V                &kp SINGLE_QUOTE  &kp F              &kp O            &kp U            &kp J        &kp TAB
&kp LC(BACKSPACE)  &hm LEFT_CONTROL N     &hm LEFT_ALT R  &hm LEFT_GUI T  &hm LEFT_SHIFT S  &ht_hl 5 G           &ht_hl 5 Y        &hm RIGHT_SHIFT H  &hm RIGHT_GUI A  &hm RIGHT_ALT E  &hm RCTRL I  &kp RIGHT_CONTROL
&kp DELETE         &left_taphold LC(X) X  &kp Q           &kp M           &kp W             &kp B       &kp RET  &kp K             &kp P              &kp SEMI         &kp MINUS        &kp FSLH     &kp LEFT_SHIFT
                                          &kp COMMA       &key_repeat     &mo 6             &kp SPACE            &kp BSPC          &kp ENTER          &to 1            &kp DOT
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>;
        };

        Gaming-layer {
            bindings = <
&none  &kp ESC           &kp Q  &kp W  &kp E   &kp R                     &none   &none     &kp UP_ARROW  &none      &kp TAB  &none
&none  &kp LEFT_CONTROL  &kp A  &kp S  &kp D   &kp F                     &none   &kp LEFT  &kp DOWN      &kp RIGHT  &none    &none
&none  &kp LEFT_SHIFT    &none  &none  &none   &kp P   &kp C_PLAY_PAUSE  &none   &none     &none         &none      &to 3    &none
                         &none  &to 0  &trans  &trans                    &trans  &trans    &to 2         &none
            >;

            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;
        };

        Symbol-Layer {
            bindings = <
&none  &kp AMPS   &kp FSLH       &kp GRAVE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS              &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp COLON         &kp SEMI           &kp PLUS   &none
&none  &kp HASH   &kp BACKSLASH  &kp TILDE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET                  &kp DOLLAR      &kp RIGHT_SHIFT  &kp RGUI          &kp RALT           &kp RCTRL  &none
&none  &kp ASTRK  &kp PERCENT    &kp CARET  &kp LT                &kp GREATER_THAN       &kp C_MUTE  &kp MINUS       &kp UNDER        &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp EQUAL  &none
                  &none          &to 0      &trans                &trans                             &trans          &trans           &to 1             &none
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
        };

        Bluetooth-Layer {
            bindings = <
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4               &kp F1       &kp F2   &kp F3   &kp F4      &kp F5   &kp F6
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4              &kp F7       &kp F8   &kp F9   &kp F10     &kp F11  &kp F12
&none  &out OUT_TOG   &none          &bt BT_PRV     &bt BT_NXT     &bt BT_CLR     &kp C_MUTE  &bootloader  &kp F11  &kp F12  &sys_reset  &to 4    &none
                      &none          &to 0          &trans         &trans                     &trans       &trans   &none    &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        Chinese-Layer {
            bindings = <
&kp ESC            &kp Q  &kp W  &kp E  &kp R  &kp T              &kp Y          &kp U      &kp I             &kp O              &kp P     &kp TAB
&kp LC(BACKSPACE)  &kp A  &kp S  &kp D  &kp F  &kp G              &kp H          &kp J      &kp K             &kp L              &kp SEMI  &kp MINUS
&kp DELETE         &kp Z  &kp X  &kp C  &kp V  &kp B      &trans  &kp N          &kp M      &kp COMMA         &kp DOT            &kp FSLH  &kp LEFT_SHIFT
                          &none  &to 0  &mo 6  &kp SPACE          &kp BACKSPACE  &kp ENTER  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
            >;

            sensor-bindings = <&inc_dec_kp LEFT_BRACKET RIGHT_BRACKET>;
        };

        Number-Layer {
            bindings = <
&kp RIGHT_PARENTHESIS  &kp EXCL   &kp AT     &kp HASH   &kp POUND  &kp PLUS           &kp MINUS  &kp PERCENT    &kp CARET    &kp AMPS  &kp ASTRK  &kp LEFT_PARENTHESIS
&kp N0                 &kp N1     &kp N2     &kp N3     &kp N4     &trans             &trans     &kp N5         &kp N6       &kp N7    &kp N8     &kp N9
&kp LG(LEFT)           &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)  &trans  &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp DOT   &kp END    &kp LG(RIGHT)
                                  &none      &none      &none      &kp SPACE          &kp BSPC   &none          &none        &none
            >;

            sensor-bindings = <&inc_dec_kp LS(J) LS(K)>;
        };

        Mouse-Control {
            bindings = <
&none  &kp ESCAPE                     &kp C_VOL_DN   &kp F12        &kp C_VOLUME_UP  &kp C_MUTE                 &msc SCRL_DOWN  &mkp MB1        &kp F1          &mkp MB2      &mkp MB3         &none
&none  &kp LEFT                       &kp DOWN       &kp UP_ARROW   &kp RIGHT        &kp PAGE_UP                &kp RC(F3)      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &none
&none  &left_taphold RG(GRAVE) GRAVE  &kp RC(RG(Q))  &kp LS(LG(S))  &swapper         &kp PAGE_DOWN  &kp K_MUTE  &msc SCRL_UP    &kp LC(RIGHT)   &kp RS(RIGHT)   &kp RS(LEFT)  &kp LC(LEFT)     &none
                                      &none          &trans         &trans           &trans                     &trans          &trans          &trans          &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};
